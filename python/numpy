Use np.savetxt('filename', buf, delimiter = none) to save datas in an array

********************
np.multiply(arr1,arr2) is to multiply the array by corresponding element, arr1 * arr2 is the same, np.dot(arr1, arr2) is the multiply between matrix

Attention: If you just use array type, there is no strict limit of dimensionduring dot operation, but using matrix has strict dimension requirement

e.g.: a is 3*3, b = [1,2,3], if b is an array, then both np.dot(a,b) and np.dot(b,a) are correct, but if b is a matrix, then there will be a problem when doing np.dot(a,b)
********************

np.max(arr) and np.min(arr) to get the max and the min

np.reshape()

np.save('filename'), np.load('filename')

np.random.randn(amount ,size1,size2...)

np.r_(arr1, arr2) to connect two arr from top to bottom(pile up two array)

U, sigma, VT = np.linalg.svd(matrix), svd returns the result of svd (three matrix)
np.linalg.norm() to compute the norm of an array

np.nonzero() return the non zero elements in the form [nonzero_indexList, zero_indexList]

np.matrix() create a matrix for a matrix m , m.T is the transpose(array also has T), m.I is the inverse(array has no I)

np.where(array judge, value, other_value ), this will judge every element in the array , if True, change it to value, if False, change it to other_value, this doesn't change the array right in place

np.flat([indexlist]) = value  to assign value to certain index, regarding np as a 1d array.

np.ndim return the dimension(e.g. 3d ), np.shape the shape(e.g. 2*3*4), np.size return total size(e.g. 50 element in total)

np.transpose(), np.T
------------------------------
np.random is more suitable than original random!!!!!
------------------------------

np.row_stack((arr1,arr2)), np.column_stack((arr1,arr2)), np.insert() ,  np.append() works like extend of a list, if you want something like list.append(), use these methods!!!

np.meshgrid(arr1, arr2)
